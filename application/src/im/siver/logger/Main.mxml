<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
                       xmlns:tabs="im.siver.logger.views.components.tabs.*" showStatusBar="false" usePreloader="false"
                       chromeColor="#B2B2B2" contentBackgroundColor="#FFFFFF" initialize="onInit()">
    <fx:Style>
        @namespace s "library://ns.adobe.com/flex/spark";
        @namespace mx "library://ns.adobe.com/flex/halo";

        s|WindowedApplication {
            fontSize: 11;
        }

        s|Window {
            fontSize: 11;
        }

    </fx:Style>
    <fx:Script>
		<![CDATA[
        import im.siver.logger.controllers.HomeController;
        import im.siver.logger.controllers.MenuController;
        import im.siver.logger.controllers.TabController;
        import im.siver.logger.models.Constants;
        import im.siver.logger.models.Fonts;
        import im.siver.logger.models.LoggerClient;
        import im.siver.logger.models.WindowIds;
        import im.siver.logger.services.HistoryReader;
        import im.siver.logger.services.AppUpdater;
        import im.siver.logger.services.netgroup.NetgroupServer;
        import im.siver.logger.services.socket.SocketServer;
        import im.siver.logger.utils.LoggerUtils;
        import im.siver.logger.views.components.plus.TabCloseable;
        import im.siver.logger.views.components.windows.AboutWindow;

        import mx.events.IndexChangedEvent;
        import mx.events.ListEvent;

        // Controllers and basic windows
        private var home:HomeController;
        private var tabs:Vector.<TabController> = new Vector.<TabController>();
        private var aboutWindow:AboutWindow;

        /**
         * Application is ready
         */
        private function onInit():void {
            Fonts;

            // Start the servers
            SocketServer.initialize();
            SocketServer.onClientConnect = onClientConnect;
            NetgroupServer.initialize();
            NetgroupServer.onClientConnect = onClientConnect;

            // Check for update
            AppUpdater.check();

            // Center window if the window is outside a screen
            LoggerUtils.loadWindowOptions(nativeWindow, WindowIds.MAIN);

            // Load history (recent files)
            HistoryReader.load();

            // Create the home tab
            home = new HomeController(container);

            // Init the menu
            MenuController.initialize(nativeWindow);
            MenuController.addEventListener(MenuController.ALWAYS_ON_TOP, stayOnTop);
            MenuController.addEventListener(MenuController.ABOUT, showAbout);
            MenuController.addEventListener(MenuController.EXPORT_CLIENT_SWC, urlHandler);
            MenuController.addEventListener(MenuController.EXPORT_CLIENT_MOBILE_SWC, urlHandler);
            MenuController.addEventListener(MenuController.PRODUCT_WEBSITE, urlHandler);
            MenuController.addEventListener(MenuController.ISSUE, urlHandler);
            MenuController.addEventListener(MenuController.AS3_REFERENCE, urlHandler);
            MenuController.addEventListener(MenuController.AS3_RUNTIME_ERRORS, urlHandler);
            MenuController.addEventListener(MenuController.RIA_GUIDE, urlHandler);
            MenuController.addEventListener(MenuController.FLASH_PLAYERS, urlHandler);

            // Close
            NativeApplication.nativeApplication.addEventListener(Event.EXITING, exitApplication, false, 0, true);
            nativeWindow.addEventListener(NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING, windowStateHandler, false, 0, true);
            nativeWindow.addEventListener(Event.CLOSING, closeApplication, false, 0, true);

            container.viewstack.addEventListener(IndexChangedEvent.CHANGE, onTabChange, false, 0, true);
            container.addEventListener(TabCloseable.CLOSE_TAB, closedTab, false, 0, true);
            container.addEventListener(TabCloseable.CLOSE_APPLICATION, closeApplication, false, 0, true);
        }

        private function stayOnTop(e:Event):void {
            alwaysInFront = !alwaysInFront;
        }

        private function showAbout(e:Event):void {
            if (aboutWindow == null || aboutWindow.closed) {
                aboutWindow = new AboutWindow();
            }
            aboutWindow.open();
            aboutWindow.activate();
        }

        private function onTabChange(e:IndexChangedEvent):void {
            var i:int = 0;
            if (tabs.length >= 1 && e.newIndex > 0) {
                var num:Number = e.newIndex;
                for (i = 0; i < tabs.length; i++) {
                    tabs[i].active = false;
                }
                tabs[num - 1].active = true;
            } else {
                for (i = 0; i < tabs.length; i++) {
                    tabs[i].active = false;
                }
            }
        }

        /**
         * Created a new tab for the client
         */
        private function onClientConnect(client:LoggerClient):void {
            var i:int = 0;
            for (i = 0; i < tabs.length; i++) {
                if (client.fileLocation == tabs[i].client.fileLocation && client.fileTitle == tabs[i].client.fileTitle) {
                    tabs[i].client = client;
                    return;
                }
            }
            var tab:TabController = new TabController(container, client);
            tab.active = true;
            for (i = 0; i < tabs.length; i++) {
                tabs[i].active = false;
            }

            tabs.push(tab);

            // Add or check for recent
            home.addRecent(client);
        }

        private function urlHandler(e:Event):void {
            switch (e.type) {
                case MenuController.EXPORT_CLIENT_SWC:
                    var originalFile1:File = File.applicationDirectory.resolvePath("export/MonsterDebugger.swc");
                    var file1:File = File.desktopDirectory.resolvePath("MonsterDebugger.swc");
                    file1.addEventListener(Event.SELECT, function (e:Event):void {
                        originalFile1.copyTo(file1, true);
                    });
                    file1.browseForSave("Save MonsterDebugger.swc");
                    break;
                case MenuController.EXPORT_CLIENT_MOBILE_SWC:
                    var originalFile2:File = File.applicationDirectory.resolvePath("export/MonsterDebuggerMobile.swc");
                    var file2:File = File.desktopDirectory.resolvePath("MonsterDebuggerMobile.swc");
                    file2.addEventListener(Event.SELECT, function (e:Event):void {
                        originalFile2.copyTo(file2, true);
                    });
                    file2.browseForSave("Save MonsterDebugger.swc");
                    break;
                case MenuController.PRODUCT_WEBSITE:
                    navigateToURL(new URLRequest(Constants.URL_SITE));
                    break;
                case MenuController.ISSUE:
                    navigateToURL(new URLRequest(Constants.URL_ISSUES));
                    break;
                case MenuController.AS3_REFERENCE:
                    navigateToURL(new URLRequest(Constants.URL_AS3_REFERENCE));
                    break;
                case MenuController.AS3_RUNTIME_ERRORS:
                    navigateToURL(new URLRequest(Constants.URL_AS3_ERRORS));
                    break;
                case MenuController.RIA_GUIDE:
                    navigateToURL(new URLRequest(Constants.URL_AS3_RIA));
                    break;
                case MenuController.FLASH_PLAYERS:
                    navigateToURL(new URLRequest(Constants.URL_AS3_PLAYER));
                    break;
            }
        }

        /**
         * Tab is closed
         */
        private function closedTab(e:ListEvent):void {
            var count:int = e.rowIndex;
            container.removeTab(tabs[e.rowIndex - 1]._tab);
            tabs[e.rowIndex - 1].clear();
            tabs.splice(e.rowIndex - 1, 1);
        }

        /**
         * im.siver.logger.Main window is maximized, save previous position
         */
        private function windowStateHandler(event:NativeWindowDisplayStateEvent):void {
            // Save when we maximize
            if (event.afterDisplayState == NativeWindowDisplayState.MAXIMIZED) {
                LoggerUtils.saveWindowOptions(nativeWindow, WindowIds.MAIN);
            }
        }

        /**
         * Application is closing
         */
        private function closeApplication(e:Event):void {
            LoggerUtils.saveWindowOptions(nativeWindow, WindowIds.MAIN);
            SocketServer.stop();
            NetgroupServer.stop();
            var windows:Array = NativeApplication.nativeApplication.openedWindows;
            for (var i:int = 0; i < windows.length; i++) {
                windows[i].close();
            }
            NativeApplication.nativeApplication.exit();
        }

        private function exitApplication(e:Event):void {
            SocketServer.stop();
            NetgroupServer.stop();
            var windows:Array = NativeApplication.nativeApplication.openedWindows;
            for (var i:int = 0; i < windows.length; i++) {
                windows[i].close();
            }
        }
        ]]>
	</fx:Script>
    <tabs:TabContainer id="container" x="0" y="0" width="100%" height="100%"/>
</s:WindowedApplication>